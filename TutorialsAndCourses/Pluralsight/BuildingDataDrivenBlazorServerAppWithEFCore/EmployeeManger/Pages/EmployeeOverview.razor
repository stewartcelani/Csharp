@page "/employees/list"
@using EmployeeManger.Data
@using EmployeeManger.Data.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.QuickGrid.EntityFrameworkAdapter 
@inject EmployeeManagerDbContext Context

<PageTitle>Employees</PageTitle>

<h1>Employees</h1>
@if (employeesQueryable is null)
{
    <p>Loading...</p>
}
else
{
    
    <QuickGrid Items="@FilteredEmployeesQueryable" Pagination="@pagination">
        <PropertyColumn Property="@(employee => employee.Id)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="firstNameFilter" @bind:event="oninput" placeholder="First name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(employee => employee.FirstName)" Sortable="true" />
        <PropertyColumn Property="@(employee => employee.LastName)" Sortable="true" />
    </QuickGrid>
    <Paginator Value="@pagination" />

}


@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };
    IQueryable<Employee>? employeesQueryable;
    string firstNameFilter;

    IQueryable<Employee>? FilteredEmployeesQueryable
    {
        get
        {
            if (employeesQueryable is null) return null;
            
            var filteredEmployeesQueryable = employeesQueryable;

            if (!string.IsNullOrEmpty(firstNameFilter))
            {
                filteredEmployeesQueryable = filteredEmployeesQueryable.Where(employee => employee.FirstName.Contains(firstNameFilter));
            }

            return filteredEmployeesQueryable;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        employeesQueryable = Context.Employees.Include(employee => employee.Department).AsQueryable();
    }
}